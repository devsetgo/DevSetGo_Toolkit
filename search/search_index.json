{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> <p>CI/CD Pipeline:  </p> <p>SonarCloud:  </p>"},{"location":"#devsetgo-toolkit","title":"DevSetGo Toolkit","text":"<p>A set of common functions wrapped into a package, so I don't have to write the same code over and over. Oh and it makes the code more reusable.... or something like that.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Can be found here.</p>"},{"location":"#testing","title":"Testing","text":"<p>Test on Windows and Linux. Since I work in Windows and Linux, testing is mostly there. Should work on MacOS, but let me know if there is an issue.</p>"},{"location":"#library-functions","title":"Library Functions","text":"<ul> <li>HTTP Codes</li> <li>Base Schema</li> </ul>"},{"location":"baseschema/","title":"Base Schema Module","text":"<p>This module defines the base schema for database models in the application. It uses SQLAlchemy as the ORM and provides a <code>SchemaBase</code> class that all other models should inherit from. The <code>SchemaBase</code> class includes common columns that are needed for most models like <code>_id</code>, <code>date_created</code>, and <code>date_updated</code>.</p>"},{"location":"baseschema/#columns","title":"Columns","text":"<ul> <li><code>_id</code>: A unique identifier for each record. It's a string representation of a UUID.</li> <li><code>date_created</code>: The date and time when a particular row was inserted into the table. It defaults to the current UTC time when the instance is created.</li> <li><code>date_updated</code>: The date and time when a particular row was last updated. It defaults to the current UTC time whenever the instance is updated.</li> </ul>"},{"location":"baseschema/#usage","title":"Usage","text":"<p>To use this module, import it and extend the <code>SchemaBase</code> class to create new database models. Here's an example:</p> <pre><code>from base_schema import SchemaBase\nfrom sqlalchemy import Column, Integer, String\n\nclass User(SchemaBase):\n    __tablename__ = 'users'\n\n    name = Column(String, index=True)\n    age = Column(Integer)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog</p>"},{"location":"changelog/#todo","title":"Todo","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":"<ul> <li>Tools</li> <li>HTTP Codes</li> <li>User library</li> <li>Base Schema</li> <li>Database Operations</li> <li>Database Connector [partial]</li> </ul>"},{"location":"changelog/#010-initial-beta-release","title":"[0.1.0] - Initial Beta Release","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Project layout</li> <li>Basic tests</li> <li>Simple functions<ul> <li>Database Connector</li> </ul> </li> <li>Start of Documentation</li> </ul>"},{"location":"contribute/","title":"Contributing","text":"<p>Please feel to contribute to this project. Adding common functions is the intent and if you have one to add or improve an existing it is greatly appreciated.</p>"},{"location":"contribute/#ways-to-contribute","title":"Ways to Contribute!","text":"<ul> <li>Add or improve a function</li> <li>Add or improve documentation</li> <li>Add or improve Tests</li> <li>Report or fix a bug</li> </ul>"},{"location":"httpcodes/","title":"HTTP Response Codes","text":"<p>This Python file defines a dictionary of HTTP error codes and their respective descriptions. The dictionary provides a mapping between HTTP error codes and their description strings, which can be used to define or handle custom error responses for an API.</p> <p>The file also includes the function <code>generate_code_dict(codes, description_only=False)</code>, which generates a dictionary of specific HTTP error codes from the <code>http_codes</code> dictionary.</p>"},{"location":"httpcodes/#usage","title":"Usage","text":"<p>You can use this file in the following ways:</p>"},{"location":"httpcodes/#using-the-http_codes-dictionary","title":"Using the <code>http_codes</code> Dictionary","text":"<p>Access any HTTP code's information as follows:</p> <pre><code># Accessing the \"OK\" status code\nhttp_codes[200]\n</code></pre> <p>This will output:</p> <pre><code>{\n    \"description\": \"OK\",\n    \"link\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200\"\n}\n</code></pre>"},{"location":"httpcodes/#using-the-generate_code_dict-function","title":"Using the <code>generate_code_dict</code> Function","text":"<p>Generate a dictionary of specific HTTP error codes as follows:</p> <pre><code># Define a list of common HTTP status codes\ncommon_codes = [200, 400, 401, 403, 404, 408, 429, 500, 503]\n\n# Generate a dictionary of these status codes with their descriptions\nMY_CODES = generate_code_dict(common_codes + [206, 304, 307, 410, 418, 502], description_only=True)\n</code></pre> <p>This will return a dictionary where each key is an HTTP error code from the input list and each value is the corresponding description.</p>"},{"location":"httpcodes/#generating-common-error-codes-for-different-request-methods","title":"Generating Common Error Codes for Different Request Methods","text":"<p>Use the <code>generate_code_dict</code> function to generate dictionaries of common error codes for different request methods:</p>"},{"location":"httpcodes/#get-requests","title":"GET Requests","text":"<pre><code>from devsetgo_toolkit import GET_CODES\n\n# Print the default GET_CODES\nprint(GET_CODES)\n\n# Now add an additional status code (418) to the list and generate a new dictionary\nMY_CODES = generate_code_dict(GET_CODES + [418], description_only=False)\nprint(MY_CODES)\n</code></pre>"},{"location":"httpcodes/#post-requests","title":"POST Requests","text":"<pre><code>from devsetgo_toolkit import POST_CODES\n\n# Print the default POST_CODES\nprint(POST_CODES)\n\n# Add an additional status code (418) to the list and generate a new dictionary\nMY_CODES = generate_code_dict(POST_CODES + [418], description_only=False)\nprint(MY_CODES)\n</code></pre>"},{"location":"httpcodes/#put-requests","title":"PUT Requests","text":"<pre><code>from devsetgo_toolkit import PUT_CODES\n\n# Print the default PUT_CODES\nprint(PUT_CODES)\n\n# Add an additional status code (418) to the list and generate a new dictionary\nMY_CODES = generate_code_dict(PUT_CODES + [418], description_only=False)\nprint(MY_CODES)\n</code></pre>"},{"location":"httpcodes/#patch-requests","title":"PATCH Requests","text":"<pre><code>from devsetgo_toolkit import PATCH_CODES\n\n# Print the default PATCH_CODES\nprint(PATCH_CODES)\n\n# Add an additional status code (418) to the list and generate a new dictionary\nMY_CODES = generate_code_dict(PATCH_CODES + [418], description_only=False)\nprint(MY_CODES)\n</code></pre>"},{"location":"httpcodes/#delete-requests","title":"DELETE Requests","text":"<pre><code>from devsetgo_toolkit import DELETE_CODES\n\n# Print the default DELETE_CODES\nprint(DELETE_CODES)\n\n# Add an additional status code (418) to the list and generate a new dictionary\nMY_CODES = generate_code_dict(DELETE_CODES + [418], description_only=False)\nprint(MY_CODES)\n</code></pre> <p>These dictionaries can be used to define HTTP error codes commonly encountered with each type of request method in an API.</p>"}]}